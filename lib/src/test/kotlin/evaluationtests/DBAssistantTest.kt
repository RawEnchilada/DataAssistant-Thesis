/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package evaluationtests

import dbassistant.DBAssistant
import dbassistant.analysis.Logging
import dbassistant.layers.PromptPreparationLayer
import dbassistant.layers.TokenizationLayer
import dbassistant.layers.QueryPreparationLayer
import dbassistant.tokens.Tokenizer
import dbassistant.neural.QueryGenerator
import evaluationtests.db.DBConfig
import evaluationtests.db.GlossaryHandlerFactory
import evaluationtests.db.Orient
import java.io.File
import java.nio.file.Paths
import kotlin.test.Test
import kotlin.test.assertEquals

class DBAssistantTest {

    companion object{
        private val config:DBConfig = DBConfig("remote:localhost","peopledb","root","root")
        private val db: Orient = Orient(config)

        private const val promptSize = 50
        private const val memorySize = 10
        private const val argumentsSize = 10
        private const val wordSize = 300


        private val tokenizer = Tokenizer(GlossaryHandlerFactory(db),promptSize, argumentsSize, wordSize)
        private val queryGenerator = QueryGenerator(promptSize, memorySize, tokenizer)
        private val ai: DBAssistant = DBAssistant(
            queryGenerator,
            arrayOf(
                PromptPreparationLayer(promptSize),
                TokenizationLayer(
                    tokenizer,
                    queryGenerator
                ),
                QueryPreparationLayer()
            )
        )

        private val currentDir = Paths.get("").toAbsolutePath().toString()
        private val modelPath = currentDir+"/model"
        private val trainingDataPath = currentDir+"/model/training_data.csv"

        init{
            val model = File(modelPath+"/layers")
            if(model.exists()){
                //ai.loadModel(modelPath)
            }
            else{
                //ai.trainOn(trainingDataPath)
                //ai.saveModel(modelPath)
            }
            ai.trainOn(trainingDataPath)
            //Logging.println("DBAssistantTest initialized. Used wordMap:\n${ai.wordMap.toString()}")
        }

    }


    //"Who works at BadCompany?";"SELECT name FROM Person WHERE out('employment').name = 'BadCompany'"
    @Test
    fun WhoWorksAtBadCompany(){
        Logging.println()
        Logging.println("WhoWorksAtBadCompany - Test")
        Logging.println("    Expecting: SELECT name FROM Person WHERE out('employment').name = 'BadCompany'")
        val query = ai.evaluate("Who works at BadCompany?")
        Logging.println("    Got: $query")
        assertEquals("SELECT name FROM Person WHERE out('employment').name = 'BadCompany'",query)
    }
    
    //"Who is Alice's spouse?";"SELECT name FROM Person WHERE @rid IN (SELECT in('spouse').@rid FROM Person WHERE name = 'Alice')"
    @Test
    fun WhoIsAlicesSpouse(){
        Logging.println()
        Logging.println("WhoIsAlicesSpouse - Test")
        Logging.println("    Expecting: SELECT name FROM Person WHERE @rid IN (SELECT in('spouse').@rid FROM Person WHERE name = 'Alice')")
        val query = ai.evaluate("Who is Alice's spouse?")
        Logging.println("    Got: $query")
        assertEquals("SELECT name FROM Person WHERE @rid IN (SELECT in('spouse').@rid FROM Person WHERE name = 'Alice')",query)
    }

}
