/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package dbassistanttest

import dbassistant.DBAssistant
import dbassistant.analysis.Logging
import dbassistanttest.db.DBConfig
import dbassistanttest.db.Glossary
import dbassistanttest.db.Orient
import java.io.File
import java.nio.file.Paths
import kotlin.test.Test
import kotlin.test.assertEquals

class DBAssistantTest {

    companion object{
        private val config:DBConfig = DBConfig("remote:localhost","peopledb","root","root")
        private val db: Orient = Orient(config)
        private val glossary:Glossary = Glossary(db)
        private val ai: DBAssistant = DBAssistant(db,glossary,50,10,10,300)

        private val currentDir = Paths.get("").toAbsolutePath().toString()
        private val modelPath = currentDir+"/model"
        private val trainingDataPath = currentDir+"/model/training_data.csv"

        init{
            val model = File(modelPath+"/layers")
            if(model.exists()){
                ai.loadModel(modelPath)
            }
            else{
                ai.trainOn(trainingDataPath)
                ai.saveModel(modelPath)
            }
            Logging.println("DBAssistantTest initialized. Used wordMap:\n${ai.wordMap.toString()}")
        }

    }


    //"Who works at BadCompany?";"SELECT name FROM Person WHERE out('employment').name = 'BadCompany'"
    @Test
    fun WhoWorksAtBadCompany(){
        Logging.println("WhoWorksAtBadCompany - Test")
        Logging.println("    Expecting: SELECT name FROM Person WHERE out('employment').name = 'BadCompany'")
        val query = ai.semanticLayer.pass("Who works at BadCompany?")
        Logging.println("    Got: $query")
        assertEquals("SELECT name FROM Person WHERE out('employment').name = 'BadCompany'",query)
    }
    
    //"Who is Alice's spouse?";"SELECT name FROM Person WHERE @rid IN (SELECT in('spouse').@rid FROM Person WHERE name = 'Alice')"
    @Test
    fun WhoIsAlicesSpouse(){
        Logging.println("WhoIsAlicesSpouse - Test")
        Logging.println("    Expecting: SELECT name FROM Person WHERE @rid IN (SELECT in('spouse').@rid FROM Person WHERE name = 'Alice')")
        val query = ai.semanticLayer.pass("Who is Alice's spouse?")
        Logging.println("    Got: $query")
        assertEquals("SELECT name FROM Person WHERE @rid IN (SELECT in('spouse').@rid FROM Person WHERE name = 'Alice')",query)
    }

}
